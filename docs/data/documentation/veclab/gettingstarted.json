{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To begin using the library, you will need to be familiar with the basic data types."}]},{"anchor":"Real-and-Complex-Data-Types","level":4,"type":"heading","text":"Real and Complex Data Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"VecLab does not define any new types for real and complex numbers or arrays. Four typealiases are defined for existing Swift types, starting with "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["public typealias Real = Double","public typealias RealArray = [Real]","public typealias Complex = (Real, Real)","public typealias ComplexArray = ([Real], [Real])"]},{"anchor":"Scalars","level":3,"type":"heading","text":"Scalars"},{"anchor":"Real-Number","level":4,"type":"heading","text":"Real Number"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Real numbers are just "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" types:"}]},{"type":"codeListing","syntax":"swift","code":["let a =  10.0","let c: Double =  123"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A real number is refered by the typealias of "},{"type":"codeVoice","code":"Real"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["let c: Real =  123.0"]},{"anchor":"Complex-Number","level":4,"type":"heading","text":"Complex Number"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A complex number is a tuple of two "},{"type":"codeVoice","code":"Real"},{"type":"text","text":" numbers. For example, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"1 + 10i"}]},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let a = (1.0, 10.0)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that no labels are required, but can be specified. In Swift, tuples are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"compound"}]},{"type":"text","text":" types and do not behave like the more familiar "},{"type":"emphasis","inlineContent":[{"type":"text","text":"named"}]},{"type":"text","text":" types, such as classes, structs and enums. These examples are all of type "},{"type":"codeVoice","code":"(Double, Double)"},{"type":"text","text":". The label names are not part of the type."}]},{"type":"codeListing","syntax":"swift","code":["let b = (r: 1.0, i: 10.0)","let c = (real: 1.0, imag:10.0)","let d = (real: 1.0, imaginary:10.0)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tuple elments, the real and imaginary parts, can always the "},{"type":"codeVoice","code":".0"},{"type":"text","text":" and "},{"type":"codeVoice","code":".1"},{"type":"text","text":" properties regardless of any label."}]},{"type":"codeListing","syntax":"swift","code":["let complexNumber =  (r: 1.0, i: 0.0)","let realPart = complexNumber.0","let imaginaryPart = complexNumber.1"]},{"anchor":"The-Imaginary-Unit","level":4,"type":"heading","text":"The Imaginary Unit"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The imaginary unit "},{"type":"emphasis","inlineContent":[{"type":"text","text":"i"}]},{"type":"text","text":" is an extension of "},{"type":"codeVoice","code":"Double"},{"type":"text","text":". The definition is the tuple "},{"type":"codeVoice","code":"(0,1)"},{"type":"text","text":". A complex number can be initialized this way, though it is better to use the tuple form otherwise it will be evaluated as a expression at run-time."}]},{"type":"codeListing","syntax":"swift","code":["let c = 1 + 10.0 * Real.i"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"i"},{"type":"text","text":" property can be used in any expression. For example, a complex exponential:"}]},{"type":"codeListing","syntax":"swift","code":["let a = exp(Real.i * 2 * Real.pi * 10.0)"]},{"anchor":"Vectors-and-Arrays","level":3,"type":"heading","text":"Vectors and Arrays"},{"anchor":"Real-Arrays","level":4,"type":"heading","text":"Real Arrays"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Vectors are Swift arrays of ‘Double’ and can be created in the normal way:"}]},{"type":"codeListing","syntax":"swift","code":["let a = [1.0, 2.0, 3.0]","let b = [Double](repeating: 0.0, count: 10)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is prefered to use the typealiases of "},{"type":"codeVoice","code":"Real"},{"type":"text","text":" or "},{"type":"codeVoice","code":"RealArray"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["let c = [Real](repeating: 0.0, count: 10)","let d = RealArray(repeating: 0.0, count: 10)"]},{"anchor":"The-vector-Function","level":4,"type":"heading","text":"The vector Function"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A shorter and more versatile function is provided to create arrays."}]},{"type":"codeListing","syntax":"swift","code":["let a = vector(count: 10)"]},{"anchor":"Sized-Parameter","level":5,"type":"heading","text":"Sized Parameter"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A vector often needs to be initialized as the same size as another vector."}]},{"type":"codeListing","syntax":"swift","code":["let a = [1.0, 2.0, 3.0]","let b = vector(sized: a)"]},{"anchor":"Range-Parameter","level":5,"type":"heading","text":"Range Parameter"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Arrays can be created from ranges of numbers. The function accepts "},{"type":"codeVoice","code":"Range"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ClosedRange"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["let t1 = vector(0..<10)","let t2 = vector(1...10)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ranges can be defined using the Swift "},{"type":"codeVoice","code":"Range"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ClosedRange"},{"type":"text","text":" types and using an optional "},{"type":"codeVoice","code":"by"},{"type":"text","text":" value (Default = 1). This has also been implemented as an extension to the "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type."}]},{"type":"codeListing","syntax":"swift","code":["let evenNumbers = vector(0..<10, 2) "]},{"anchor":"Complex-Arrays","level":4,"type":"heading","text":"Complex Arrays"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Complex arrays are defined as a tuple of two ’Real` arrays of real and imaginary parts. This structure"},{"type":"text","text":" "},{"type":"text","text":"is known a split complex, rather than interleaved."}]},{"type":"codeListing","syntax":"swift","code":["let realArray = [1.0, 2.0, 3.0]","let imagArray = [4.0, 5.0, 6.0]","let complexArray = (realArray, imagArray)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that unlike a true Swift "},{"type":"codeVoice","code":"Array"},{"type":"text","text":", a "},{"type":"codeVoice","code":"ComplexArray"},{"type":"text","text":" is a tuple and cannot use an index."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating a ComplexArrray can be longwinded:"}]},{"type":"codeListing","syntax":"swift","code":["let realArray = RealArray(repeating: 0.0, count: 10)","let imagArray = RealArray(repeating: 0.0, count: 10)","let complexArray = (realArray, imagArray)"]},{"anchor":"The-complex-Function","level":4,"type":"heading","text":"The complex Function"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Complex arrays can be initialized using the shorter "},{"type":"codeVoice","code":"complex"},{"type":"text","text":" function."}]},{"type":"codeListing","syntax":"swift","code":["let complexArray2 = complex(count: 10)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can also be used to create a complex array of the same size. A real array size can also be used."}]},{"type":"codeListing","syntax":"swift","code":["let complexArray2 = complex(sized: complexArray1)"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/veclab\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/VecLab\/documentation\/VecLab\/GettingStarted","interfaceLanguage":"swift"},"kind":"article","metadata":{"roleHeading":"Article","title":"Getting Started","role":"article","modules":[{"name":"VecLab"}]},"hierarchy":{"paths":[["doc:\/\/VecLab\/documentation\/VecLab"]]},"references":{"doc://VecLab/documentation/VecLab":{"role":"collection","title":"VecLab","abstract":[{"type":"text","text":"A real\/complex vector library in Swift."}],"identifier":"doc:\/\/VecLab\/documentation\/VecLab","kind":"symbol","type":"topic","url":"\/documentation\/veclab"}}}