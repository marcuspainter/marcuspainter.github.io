{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"codeListing","syntax":"swift","code":["public typealias Real = Double","","\/\/\/ Array of real numbers","public typealias RealArray = [Real]","","\/\/\/ Complex number as a tuple of two real numbers","public typealias Complex = (Real, Real)","","\/\/ Complex array as a tuple of two real arrays","public typealias ComplexArray = (RealArray, RealArray)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the underlying types for "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" are:"}]},{"type":"codeListing","syntax":"swift","code":["public typealias Real = Double","public typealias RealArray = [Double]","public typealias Complex = (Double, Double)","public typealias ComplexArray = ([Double], [Double])"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And for "},{"type":"codeVoice","code":"Float"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["public typealias Real = Float","public typealias RealArray = [Float]","public typealias Complex = (Float, Float)","public typealias ComplexArray = ([Float], [Float])"]},{"anchor":"Operator-Overloading","level":2,"type":"heading","text":"Operator Overloading"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Character"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Operation"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"+"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Addition"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"-"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Subraction"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"*"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiplication"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"\\"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Divison"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"^"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Power"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"~*"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Conjugate multiplication"}]}]]],"header":"row"}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/mdsp\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/mDSP\/documentation\/mDSP\/GettingStarted","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This is a summary."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Getting Started","role":"collectionGroup","modules":[{"name":"mDSP"}]},"hierarchy":{"paths":[["doc:\/\/mDSP\/documentation\/mDSP"]]},"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/mDSP\/documentation\/mDSP\/DesignGoals","doc:\/\/mDSP\/documentation\/mDSP\/LiteralValues"],"generated":true}],"references":{"doc://mDSP/documentation/mDSP/DesignGoals":{"role":"collectionGroup","title":"Design Goals","abstract":[{"type":"text","text":"This explains the design goals for the library."}],"identifier":"doc:\/\/mDSP\/documentation\/mDSP\/DesignGoals","kind":"article","type":"topic","url":"\/documentation\/mdsp\/designgoals"},"doc://mDSP/documentation/mDSP":{"role":"collection","title":"mDSP","abstract":[{"type":"text","text":"A new vector DSP library in Swift."}],"identifier":"doc:\/\/mDSP\/documentation\/mDSP","kind":"symbol","type":"topic","url":"\/documentation\/mdsp"},"doc://mDSP/documentation/mDSP/LiteralValues":{"role":"collectionGroup","title":"Literal Values","abstract":[{"type":"text","text":"How to write literal real and complex values in Swift code."}],"identifier":"doc:\/\/mDSP\/documentation\/mDSP\/LiteralValues","kind":"article","type":"topic","url":"\/documentation\/mdsp\/literalvalues"}}}