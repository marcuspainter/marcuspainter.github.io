{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Expressiveness"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Vectorizaton"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Familiarity"}]},{"anchor":"","level":3,"type":"heading","text":""},{"type":"paragraph","inlineContent":[{"type":"text","text":"MATLAB is the basis for many"}]},{"anchor":"Use-**-for-Matlab-Power-Operator","level":3,"type":"heading","text":"Use ** for Matlab Power Operator ^"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Originally the caret character "},{"type":"codeVoice","code":"^"},{"type":"text","text":" was overloaded as an infix power operator. Unfortunately Swift uses the caret as the bitwise XOR operator. I expected this operator to apply to real numbers."}]},{"type":"codeListing","syntax":"swift","code":["let x = 2.0^2.0 \/\/  4.0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The operator precedence rules could not be overidden and were ignored:"}]},{"type":"codeListing","syntax":"swift","code":["let x = 2^3^4   \/\/ 4096"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Therefore, to avoid any ambiguity, the ** operator was chosen instead."}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/vectordsp\/designgoals"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/VectorDSP\/documentation\/VectorDSP\/DesignGoals","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This explains the design goals for the library."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Design Goals","role":"article","modules":[{"name":"VectorDSP"}]},"hierarchy":{"paths":[["doc:\/\/VectorDSP\/documentation\/VectorDSP"]]},"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/VectorDSP\/documentation\/VectorDSP\/GettingStarted","doc:\/\/VectorDSP\/documentation\/VectorDSP\/LiteralValues"],"generated":true}],"references":{"doc://VectorDSP/documentation/VectorDSP":{"role":"collection","title":"VectorDSP","abstract":[{"type":"text","text":"A new vector DSP library in Swift."}],"identifier":"doc:\/\/VectorDSP\/documentation\/VectorDSP","kind":"symbol","type":"topic","url":"\/documentation\/vectordsp"},"doc://VectorDSP/documentation/VectorDSP/GettingStarted":{"role":"collectionGroup","title":"Getting Started","abstract":[{"type":"text","text":"This is a summary."}],"identifier":"doc:\/\/VectorDSP\/documentation\/VectorDSP\/GettingStarted","kind":"article","type":"topic","url":"\/documentation\/vectordsp\/gettingstarted"},"doc://VectorDSP/documentation/VectorDSP/LiteralValues":{"role":"collectionGroup","title":"Literal Values","abstract":[{"type":"text","text":"How to write literal real and complex values in Swift code."}],"identifier":"doc:\/\/VectorDSP\/documentation\/VectorDSP\/LiteralValues","kind":"article","type":"topic","url":"\/documentation\/vectordsp\/literalvalues"}}}